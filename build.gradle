plugins{
    id 'fabric-loom' version '1.9.2'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

def extensions = project.getExtensions().getExtraProperties()

def minecraftTargetVersion = findProperty("mc_version") ?: project.minecraft_version
def versionGroupFilename = "gradle-${minecraftTargetVersion.toString().split('\\.').toList()[0..1].join('.')}.properties"
def versionGroupProperties = file(versionGroupFilename)

if (versionGroupProperties.exists()) {
    versionGroupProperties.withInputStream { stream ->
        def props = new Properties()
        props.load(stream)
        props.each {
            key, value -> extensions.set(key as String, value as String)
        }
    }
    logger.log(LogLevel.INFO, "Using ${versionGroupFilename}")
} else {
    logger.log(LogLevel.WARN, "${versionGroupFilename} not found. Falling back to gradle.properties")
}
// TODO: Auto configure all other variables
extensions.yarn_mappings = project.hasProperty("yarn_mappings_${minecraftTargetVersion.toString().replace(".", "_")}")
        ? project."yarn_mappings_${minecraftTargetVersion.toString().replace(".", "_")}"
        : project.yarn_mappings

extensions.loader_version = project.hasProperty("loader_version_${minecraftTargetVersion.toString().replace(".", "_")}")
        ? project."loader_version_${minecraftTargetVersion.toString().replace(".", "_")}"
        : project.loader_version

extensions.fabric_version = project.hasProperty("fabric_version_${minecraftTargetVersion.toString().replace(".", "_")}")
        ? project."fabric_version_${minecraftTargetVersion.toString().replace(".", "_")}"
        : project.fabric_version

extensions.modmenu_version = project.hasProperty("modmenu_version_${minecraftTargetVersion.toString().replace(".", "_")}")
        ? project."modmenu_version_${minecraftTargetVersion.toString().replace(".", "_")}"
        : project.modmenu_version

extensions.cloth_config_version = project.hasProperty("cloth_config_version_${minecraftTargetVersion.toString().replace(".", "_")}")
        ? project."cloth_config_version_${minecraftTargetVersion.toString().replace(".", "_")}"
        : project.cloth_config_version

logger.lifecycle("Using Minecraft: ${minecraftTargetVersion}")
logger.lifecycle("Using YARN: ${project.yarn_mappings}")
logger.lifecycle("Using loader: ${project.loader_version}")
logger.lifecycle("Using Fabric API: ${project.fabric_version}")
logger.lifecycle("Using ModMenu: ${project.modmenu_version}")
logger.lifecycle("Using Cloth Config: ${project.cloth_config_version}")

base {
    archivesName = "${project.archives_base_name}-${minecraftTargetVersion}-${project.mod_version}"
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" } // ModMenu
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftTargetVersion}" // +
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2" // +
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}" // +
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}" // +

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}" // +

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { // + (?)
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", minecraftTargetVersion
    inputs.property "loader_version", project.loader_version
    inputs.property "modmenu_version", project.modmenu_version
    inputs.property "cloth_config_version", project.cloth_config_version

    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
                "minecraft_version": minecraftTargetVersion,
                "loader_version": project.loader_version,
                "modmenu_version": project.modmenu_version,
                "cloth_config_version": project.cloth_config_version
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

tasks.withType(AbstractArchiveTask).configureEach {
    archiveVersion = ""
}
